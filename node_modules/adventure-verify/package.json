{
  "name": "adventure-verify",
  "version": "2.1.2",
  "description": "write adventure verify functions with tape",
  "main": "index.js",
  "dependencies": {
    "tap-colorize": "^1.1.0",
    "tap-parser": "~0.5.0",
    "tape": "^2.13.2"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/adventure-verify.git"
  },
  "homepage": "https://github.com/substack/adventure-verify",
  "keywords": [
    "adventure",
    "nodeschool",
    "workshop",
    "education"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# adventure-verify\n\nwrite [adventure](https://npmjs.org/package/adventure)\nverify functions using [tape](https://npmjs.org/package/tape)\nwith [colored output](https://npmjs.org/package/tap-colorize)\nto better distinguish user output from test output\n\n# example\n\nIn your excercise code, you can do:\n\n``` js\nvar verify = require('adventure-verify');\n\nexports.problem = 'pass in the argument 555'\n\nexports.verify = verify(function (args, t) {\n    t.plan(1);\n    t.equal(args[0], '555');\n});\n```\n\nAnd then run plug your beep_boop.js excercise into your\n[adventure](https://npmjs.org/package/adventure) runner:\n\n```\nvar adventure = require('adventure');\nvar adv = adventure('robots');\n\nadv.add('beep boop', function () {\n    return require('./beep_boop.js');\n});\n\nadv.execute(process.argv.slice(2));\n```\n\n# methods\n\n``` js\nvar verify = require('adventure-verify')\n```\n\n## var fn = verify(opts={}, function (args, t) {})\n\nYou should pass in a function that will get `args`, the command-line arguments\nsupplied after the `xxx-adventure verify ...` command on the command line and\n`t`, a [tape](https://npmjs.org/package/tape) instance.\n\nThe function `fn(cb)` returned by `verify()` fits into the signature expected by\n[adventure](https://npmjs.org/package/adventure). `cb(ok)` will be called with a\nboolean `ok` based on parsing the tap output from tape for any failures.\n\nThe options `opts` will be passed to\n[tap-colorize](https://npmjs.org/package/tap-colorize).\nThese options work:\n\n* `opts.pass` - color of passing `/^ok/` lines\n* `opts.fail` - color of failing `/^not ok/` lines\n* `opts.info` - color of other tap-specific lines\n\nYou can pass in a named color such as `'green'`, an array rgb color such as\n`[40,240,100]`, a hex color such as `''#f00d55'`, and you can include a display\nmodifier such as `'bright'`, `'dim'` or `'reverse'`.\n\nYou can optionally set `opts.modeReset`, which hacks the colors back temporarily\nfor `console.log()` and `console.error()` so that user debugging statements are\nprinted without colors.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install adventure-verify\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/adventure-verify/issues"
  },
  "_id": "adventure-verify@2.1.2",
  "_shasum": "2fc560bd09ddb03b24c5565e69bade64c9da63b8",
  "_from": "adventure-verify@^2.1.1",
  "_resolved": "https://registry.npmjs.org/adventure-verify/-/adventure-verify-2.1.2.tgz"
}
